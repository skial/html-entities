package uhx.sys.html.java;

import java.util.Properties;
import uhx.sys.html.java.Utils;

using StringTools;

/**
    ------
    DO NOT EDIT THIS FILE
    ------
    This file has be auto-generated.
    Names and codepoint values built from https://html.spec.whatwg.org/multipage/entities.json
**/

enum abstract ::typeName::(String) {

    @:to public inline function toString():String return '&$this;';

    public static function has(name:String):Bool {
        return HtmlEntityHelper.has(name);
    }

    public static function all():Array<::typeName::> {
       return HtmlEntityHelper.all();
    }

    public static inline function getCodePoints(value:String):Null<Array<Int>> {
        return HtmlEntityHelper.getCodePoints(value);
    }

	public static inline function getEntity(value:String):Null<HtmlEntity> {
        return cast HtmlEntityHelper.getEntity(value);
    }

    @:to public function asCodePoints():Array<Int> {
        return HtmlEntityHelper.getCodePoints(this);
    }

    ::foreach fields::public var ::ident:: = "::value::";
    ::end::
}

class HtmlEntityHelper {

    @:isVar public static var properties(get, null):Null<Properties> = null;

    private static var resource:String = Utils.propertiesLoader();

    public static function get_properties() {
        if (properties == null) {
            properties = new Properties();
            properties.load(new java.io.StringBufferInputStream(resource));
        }
        return properties;
    }

    @:isVar private static var allValues:Array<::typeName::> = null;

    public static function all():Array<::typeName::> {
        if (allValues == null) {
            var values:java.util.Enumeration<String> = cast HtmlEntityHelper.properties.propertyNames();
            while (values.hasMoreElements()) {
                var name:String = values.nextElement();
                if (!name.endsWith('_codepoints')) allValues.push(cast name);
            }

        }

        return allValues;
    }

    public static inline function has(key:String):Bool {
        return properties.getProperty(checkKey(key)) != null;
    }

    public static inline function get(key:String):String {
        return properties.getProperty(checkKey(key));
    }

    public static inline function getCodePoints(key:String):Array<Int> {
        return properties.getProperty('${checkKey(key)}_codepoints').split(',').map( s -> Std.parseInt(s) );
    }

    public static inline function getEntity(value:String):Null<String> {
        return properties.getProperty(value);
    }

    private static function checkKey(key:String):String {
        var start = key.indexOf('&');
        var end = key.lastIndexOf(';');
        if (start != -1) start++;
        if (end == -1) end = key.length;
        return key.substring(start, end);
    }

}